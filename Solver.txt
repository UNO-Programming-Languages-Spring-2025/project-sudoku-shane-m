1a.
    - Read Input Numbers (Forgot this part when creating the first model)
    - Create 3 spans of numbers 1-4
    - Add a number for every cell
    - Constrain the Repeated numbers for every cell

1b.
    - Subgrids for a 4v4 = 4 subgrids; 4 rules?
    - Span of 4; divide the rows x collums / 2's 
        - Subgrids (1..4) => {LT, RT, LB, RB}
        - Use contraints to manage the subgrid
            - (X,Y)
                - (1-2, 1-2) => LT
                - (1-2, 3-4) => RT
                - (3-4, 1-2) => LB
                - (3-4, 3-4) => RB

1c.
    - Subgrid should have unique set of rules so that the number is unique to each subgrid
    - We already have a sequence that checks rows and collums
        - Plan
            - Check the value(N) by each Subgrid(G)
                - G => spans {1..4}
            - count the rows x collums in the subgrid(G)
        - NOTE: Rule didnt work -> Check for unique pairing within subgrid(G)
            - Try a new contraint that prevents a value being created
                - value(N), #count {X,Y: subgrid(X,Y,1), sudoku(X,Y,N) } != 1
                    - Check value at subgrid(1) => count (1..2,1..2) and value (N) to make it unique 
                - NOTE: Made a syntax error; need for Constraint ':-' 

2.
    Just rewrite the code to include {1..9}, instead of {1..4}
    NOTE: FIRST TRY!!!! :) 